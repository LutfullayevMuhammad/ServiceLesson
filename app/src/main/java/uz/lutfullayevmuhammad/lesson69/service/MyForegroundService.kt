package uz.lutfullayevmuhammad.lesson69.serviceimport android.app.*import android.content.ContentResolverimport android.content.Contextimport android.content.Intentimport android.media.AudioAttributesimport android.net.Uriimport android.os.Buildimport android.os.IBinderimport android.os.SystemClockimport android.util.Logimport androidx.core.app.NotificationCompatimport androidx.core.app.NotificationManagerCompatimport uz.lutfullayevmuhammad.lesson69.Rclass MyForegroundService : Service() {    private lateinit var notification: Notification    private lateinit var thread: Thread    private val TAG = "MyBackgroundServiceTAG"    private var isStopped = false    override fun onBind(intent: Intent?): IBinder? {        return null    }    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        Log.d(TAG, "onStartCommand: ${intent!!.getBooleanExtra("state", false)}")//        if (intent.getBooleanExtra("state", false)) {//            this.thread = Thread {//                while (!isStopped) {//                    Log.d(TAG, "onStartCommand: ")//                    Thread.sleep(1_000)//                }//            }//            thread.start()////        } else {//            stopSelf(notificationId)//        }        createNotificationChannel()        createNotification()        startForeground(notificationId, notification)        return super.onStartCommand(intent, flags, startId)    }    private val CHANNEL_ID = "channel1"    private fun createNotificationChannel() {        // Create the NotificationChannel, but only on API 26+ because        // the NotificationChannel class is new and not in the support library        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val name = "R.string.channel_name"            val descriptionText = "R.string.channel_description"            val importance = NotificationManager.IMPORTANCE_HIGH            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {                description = descriptionText            }            val uri = Uri.Builder()                .scheme(ContentResolver.SCHEME_ANDROID_RESOURCE)                .authority(packageName)                .appendPath("${R.raw.iphone}")                .build()            val audioAttributes = AudioAttributes.Builder()                .setUsage(AudioAttributes.USAGE_NOTIFICATION)                .build()            channel.setSound(uri, audioAttributes)            // Register the channel with the system            val notificationManager: NotificationManager =                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager            notificationManager.createNotificationChannel(channel)        }    }    private val notificationId = 123    private fun createNotification() {//        val intent = Intent(this, ServiceActivity::class.java).apply {//            flags = Intent.FLAG_ACTIVITY_NEW_TASK or//                    Intent.FLAG_ACTIVITY_CLEAR_TASK//        }////        val pendingIntent: PendingIntent = PendingIntent.getActivity(//            this, 0, intent, 0//        )        //Sets the maximum progress as 100        val progressMax = 100        this.notification = NotificationCompat.Builder(this, CHANNEL_ID)            .setSmallIcon(R.drawable.ic_download)            .setContentTitle("PlayMarket")            .setContentText("Downloading...")            .setOngoing(true)            .setOnlyAlertOnce(true)            .setProgress(progressMax, 0, true)//            .setContentIntent(pendingIntent)            .setPriority(NotificationCompat.PRIORITY_DEFAULT)            .setAutoCancel(true)            .build()        createNotificationChannel()        with(NotificationManagerCompat.from(this)) {            notify(notificationId, notification)        }        Thread(Runnable {            SystemClock.sleep(2000)            var progress = 0            while (progress <= progressMax) {                SystemClock.sleep(                    1000                )                progress += 10                this.notification =                    NotificationCompat.Builder(this, CHANNEL_ID)                        .setSmallIcon(R.drawable.ic_download)                        .setContentTitle("PlayMarket")                        .setContentText("Downloading $progress%")                        .setProgress(progressMax, progress, false)                        .build()                with(NotificationManagerCompat.from(this)) {                    notify(notificationId, notification)                }            }            this.notification =                NotificationCompat.Builder(this, CHANNEL_ID)                    .setSmallIcon(R.drawable.ic_complate)                    .setContentText("Download completed")                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)                    .setAutoCancel(true)                    .build()            with(NotificationManagerCompat.from(this)) {                notify(notificationId, notification)            }        }).start()    }    override fun onDestroy() {        Log.d(TAG, "onDestroy: ")        isStopped = true        super.onDestroy()    }}